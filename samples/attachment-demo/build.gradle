apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

description 'Corda attachment demo'

dependencies {
//    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
//    testCompile "junit:junit:$junit_version"
//
    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaRuntime project(path: ":webserver:webcapsule", configuration: 'runtimeArtifacts')
    cordaCompile project(':core')
    cordaCompile project(':node-driver')
//    cordaCompile project(':webserver')
    cordapp project(':samples:attachment-demo:contracts')
    // TODO fix workflows
//    cordapp project(':samples:attachment-demo:workflows')
}

def nodeTask = tasks.getByPath(':node:capsule:assemble')
def webTask = tasks.getByPath(':webserver:webcapsule:assemble')
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar', nodeTask, webTask]) {
    ext.rpcUsers = [['username': "demo", 'password': "demo", 'permissions': ["StartFlow.net.corda.attachmentdemo.AttachmentDemoFlow",
                                                                             "InvokeRpc.wellKnownPartyFromX500Name",
                                                                             "InvokeRpc.attachmentExists",
                                                                             "InvokeRpc.openAttachment",
                                                                             "InvokeRpc.uploadAttachment",
                                                                             "InvokeRpc.internalVerifiedTransactionsFeed"]]]

    directory "./build/nodes"
    nodeDefaults{
        cordapp project(':samples:attachment-demo:contracts')
//        cordapp project(':samples:attachment-demo:workflows')
    }
    node {
        name "O=Notary Service,L=Zurich,C=CH"
        notary = [validating: true]
        p2pPort 10002
        cordapps = []
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        extraConfig = ['h2Settings.address': 'localhost:10012']
    }
    node {
        name "O=Bank A,L=London,C=GB"
        p2pPort 10005
        cordapps = []
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10007"
        }
        extraConfig = ['h2Settings.address': 'localhost:10013']
    }
    node {
        name "O=Bank B,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10011"
        }
        webPort 10010
        cordapps = []
        rpcUsers = ext.rpcUsers
        extraConfig = ['h2Settings.address': 'localhost:10014']
    }
}

//TODO test
task runSender(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.attachmentdemo.workflows.AttachmentDemoKt' // todo paths
    args '--role'
    args 'SENDER'
}

task runRecipient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.attachmentdemo.workflows.AttachmentDemoKt' // todo paths
    args '--role'
    args 'RECIPIENT'
}

////TODO
//jar {
//    manifest {
//        attributes(
//                'Automatic-Module-Name': 'net.corda.samples.demos.attachment' // todo paths
//        )
//    }
//}

cordapp {
    info {
        name "CorDapp Attachment Demo"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 4
    }
}
